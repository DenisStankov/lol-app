// @ts-nocheck
/* eslint-disable */
import { NextRequest, NextResponse } from 'next/server';
import axios, { AxiosError } from 'axios';

// Debug logging for API key (safely)
console.log("API KEY AVAILABLE:", process.env.RIOT_API_KEY ? "YES (Key exists)" : "NO (Key not found)");
console.log("API KEY LOOKS VALID:", process.env.RIOT_API_KEY && !process.env.RIOT_API_KEY.includes('your-api-key-here') ? "YES" : "NO");

// Uncomment the RIOT_API_KEY constant for actual implementation
const RIOT_API_KEY = process.env.RIOT_API_KEY || 'RGAPI-your-api-key-here';

// At the top of the file
let generatedStatsCache: any = null;

// Add all the interfaces and type definitions here...
// (copy all interfaces from the original file)

// Add rate limiting helper
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Function to get match data with rate limiting
async function getMatchData(matchId: string, region: string): Promise<any> {
  try {
    const routingValue = regionToRoutingValue[region.toLowerCase()] || 'americas';
    const url = `https://${routingValue}.api.riotgames.com/lol/match/v5/matches/${matchId}`;
    
    const response = await axios.get(url, {
      headers: {
        'X-Riot-Token': RIOT_API_KEY
      }
    });
    
    // Add small delay to respect rate limits
    await delay(50); // 50ms delay between requests
    
    return response.data;
  } catch (error) {
    if (error.response?.status === 429) {
      // Rate limit hit - wait and retry
      const retryAfter = error.response.headers['retry-after'] || 1;
      console.log(`Rate limit hit, waiting ${retryAfter}s before retry...`);
      await delay(retryAfter * 1000);
      return getMatchData(matchId, region);
    }
    console.error(`Error fetching match data for ${matchId}:`, error);
    return null;
  }
}

// Add all the other functions here...
// (copy all other functions from the original file)

// Add the API route handler
export async function GET(req) {
  // ... copy the rest of the code from the original file ...
} 